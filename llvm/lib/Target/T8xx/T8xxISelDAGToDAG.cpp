
//===-- T8xxISelDAGToDAG.cpp - A dag to dag inst selector for T8xx ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the SPARC target.
//
//===----------------------------------------------------------------------===//

#include "T8xxTargetMachine.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===--------------------------------------------------------------------===//
/// T8xxDAGToDAGISel - SPARC specific code to select SPARC machine
/// instructions for SelectionDAG operations.
///
namespace {
class T8xxDAGToDAGISel : public SelectionDAGISel {
  /// Subtarget - Keep a pointer to the T8xx Subtarget around so that we can
  /// make the right decision when generating code for different targets.
  const T8xxSubtarget *Subtarget = nullptr;
public:
  explicit T8xxDAGToDAGISel(T8xxTargetMachine &tm) : SelectionDAGISel(tm) {}

  void Select(SDNode *N) override;

  // Complex Pattern Selectors.
  bool SelectADDRrr(SDValue Addr, SDValue &Base, SDValue &Offset);

  StringRef getPassName() const override {
    return "T8xx DAG->DAG Pattern Instruction Selection";
  }

  // Include the pieces autogenerated from the target description.
#include "T8xxGenDAGISel.inc"

private:
  SDNode *SelectMoveImmediate(SDNode *N);

};
}  // end anonymous namespace


bool T8xxDAGToDAGISel::SelectADDRrr(SDValue Addr, SDValue &Base, SDValue &Offset) {
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    EVT PtrVT = getTargetLowering()->getPointerTy(CurDAG->getDataLayout());
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), PtrVT);
    Offset = CurDAG->getTargetConstant(0, Addr, MVT::i32);
    return true;
  }
  if (Addr.getOpcode() == ISD::TargetExternalSymbol ||
      Addr.getOpcode() == ISD::TargetGlobalAddress ||
      Addr.getOpcode() == ISD::TargetGlobalTLSAddress) {
    return false; // direct calls.
  }

  Base = Addr;
  Offset = CurDAG->getTargetConstant(0, Addr, MVT::i32);
  return true;
}


SDNode *T8xxDAGToDAGISel::SelectMoveImmediate(SDNode *N) {
  // Make sure the immediate size is supported.
  ConstantSDNode *ConstVal = cast<ConstantSDNode>(N);
  uint64_t ImmVal = ConstVal->getZExtValue();
  uint64_t SupportedMask = 0xffffffff;

  printf ("SelectMoveImm\n");

  if ((ImmVal & SupportedMask) != ImmVal) {
    printf ("Imm not supp\n");
    SelectCode(N);
    return NULL;
  }
  else
    {
      // Select the low part of the immediate move.
      SDValue ConstLo = CurDAG->getTargetConstant(ImmVal, N, MVT::i32);
      MachineSDNode *Move =
	CurDAG->getMachineNode(T8xx::MOVimmr, N, MVT::i32, ConstLo);

      return Move;
    }
}


void T8xxDAGToDAGISel::Select(SDNode *N) {
  printf ("T8xxDAGToDAGIsel  %i\n", N->getOpcode());
  N->dump ();

  switch (N->getOpcode()) {
  case ISD::Constant:
    SelectMoveImmediate(N);
    break;
    /*
  case ISD::BR_CC:
    return SelectConditionalBranch(N);
    */
  default:
    SelectCode(N);
  }

  printf ("After Sel\n");
  N->dump ();
}


/// createT8xxISelDag - This pass converts a legalized DAG into a
/// SPARC-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createT8xxISelDag(T8xxTargetMachine &TM) {
  return new T8xxDAGToDAGISel(TM);
}
