
//===-- T8xxISelDAGToDAG.cpp - A dag to dag inst selector for T8xx ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the SPARC target.
//
//===----------------------------------------------------------------------===//

#include "T8xxTargetMachine.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;

#define DEBUG_TYPE "t8xx-isel"
#define PASS_NAME "T8xx DAG->DAG Pattern Instruction Selection"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===--------------------------------------------------------------------===//
/// T8xxDAGToDAGISel - SPARC specific code to select SPARC machine
/// instructions for SelectionDAG operations.
///
namespace {
class T8xxDAGToDAGISel : public SelectionDAGISel {
  /// Subtarget - Keep a pointer to the T8xx Subtarget around so that we can
  /// make the right decision when generating code for different targets.
  const T8xxSubtarget *Subtarget = nullptr;
public:
  static char ID;

  explicit T8xxDAGToDAGISel(T8xxTargetMachine &tm) : SelectionDAGISel(ID, tm) {}

  void Select(SDNode *N) override;


  SDNode *SelectConditionalBranch(SDNode *N);

  // Complex Pattern Selectors.
  bool SelectADDRri(SDValue Addr, SDValue &Base, SDValue &Offset);
  bool SelectADDRrr(SDValue Addr, SDValue &Base, SDValue &Offset);
  bool SelectADDRr(SDValue Addr, SDValue &Base);

  StringRef getPassName() const override {
    return "T8xx DAG->DAG Pattern Instruction Selection";
  }

  // Include the pieces autogenerated from the target description.
#include "T8xxGenDAGISel.inc"

private:
  SDNode *SelectMoveImmediate(SDNode *N);

};
}  // end anonymous namespace

char T8xxDAGToDAGISel::ID = 0;

INITIALIZE_PASS(T8xxDAGToDAGISel, DEBUG_TYPE, PASS_NAME, false, false)

bool T8xxDAGToDAGISel::SelectADDRri(SDValue Addr, SDValue &Base, SDValue &Offset) {
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    printf ("FrameIndexSDNode\n");
    EVT PtrVT = getTargetLowering()->getPointerTy(CurDAG->getDataLayout());
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), PtrVT);
    Offset = CurDAG->getTargetConstant(0, Addr, MVT::i32);
    return true;
  }
  if (Addr.getOpcode() == ISD::TargetExternalSymbol ||
      Addr.getOpcode() == ISD::TargetGlobalAddress ||
      Addr.getOpcode() == ISD::TargetGlobalTLSAddress) {
    return false; // direct calls.
  }

  /*
   * Note: When the base operand is the frameindex, special
   * instructions enable the use of additions without
   * having an "add" instruction.
   * I.e. add would only be needed, when the base register
   * is a regular register.
   */

#if 0
  if (Addr.getOpcode() == ISD::ADD) {
    printf ("ISD:ADD\n");
    if (ConstantSDNode *CN = dyn_cast<ConstantSDNode>(Addr.getOperand(1))) {
      // TODO: Check, whether there is a limitation to 13 bit offsets
      if (isInt<32>(CN->getSExtValue())) {
        if (FrameIndexSDNode *FIN =
                dyn_cast<FrameIndexSDNode>(Addr.getOperand(0))) {
          // Constant offset from frame ref.
          Base = CurDAG->getTargetFrameIndex(
              FIN->getIndex(), TLI->getPointerTy(CurDAG->getDataLayout()));
        } else {

	  Base = Addr.getOperand(0);
	  return true;
        }
        Offset = CurDAG->getTargetConstant(CN->getZExtValue(), SDLoc(Addr),
                                           MVT::i32);
        return true;
      }
    }
  }
#endif
  
  /* This seems to be the case that admits regular "Registers" ad
     base !?
  Base = Addr;
  Offset = CurDAG->getTargetConstant(0, Addr, MVT::i32);
  return true;
  */
  return false;
}

// Register + immediate

bool T8xxDAGToDAGISel::SelectADDRrr(SDValue Addr, SDValue &Base, SDValue &Offset) {
  if (Addr.getOpcode() == ISD::FrameIndex) return false;
  if (Addr.getOpcode() == ISD::TargetExternalSymbol ||
      Addr.getOpcode() == ISD::TargetGlobalAddress ||
      Addr.getOpcode() == ISD::TargetGlobalTLSAddress) {
    return false; // direct calls.
  }

  Base = Addr;
  Offset = CurDAG->getTargetConstant(0, Addr, MVT::i32);
  return true;
}


bool T8xxDAGToDAGISel::SelectADDRr(SDValue Addr, SDValue &Base) {
  if (Addr.getOpcode() == ISD::FrameIndex) return false;
  if (Addr.getOpcode() == ISD::TargetExternalSymbol ||
      Addr.getOpcode() == ISD::TargetGlobalAddress ||
      Addr.getOpcode() == ISD::TargetGlobalTLSAddress) {
    return false; // direct calls.
  }

  printf ("Replacing ADDRr\n");
  Base = Addr;
  return true;
}



SDNode *T8xxDAGToDAGISel::SelectMoveImmediate(SDNode *N) {
  // Make sure the immediate size is supported.
  ConstantSDNode *ConstVal = cast<ConstantSDNode>(N);
  uint64_t ImmVal = ConstVal->getZExtValue();
  uint64_t SupportedMask = 0xffffffff;

  printf ("SelectMoveImm\n");

  if ((ImmVal & SupportedMask) != ImmVal) {
    printf ("Imm not supp\n");
    SelectCode(N);
    return NULL;
  }
  else
    {
      // Select the low part of the immediate move.
      SDValue ConstLo = CurDAG->getTargetConstant(ImmVal, N, MVT::i32);
      MachineSDNode *Move =
	CurDAG->getMachineNode(T8xx::MOVimmr, N, MVT::i32, ConstLo);

      return Move;
    }
}

SDNode *T8xxDAGToDAGISel::SelectConditionalBranch(SDNode *N) {
  SDValue Chain = N->getOperand(0);
  SDValue Cond = N->getOperand(1);
  SDValue LHS = N->getOperand(2);
  SDValue RHS = N->getOperand(3);
  SDValue Target = N->getOperand(4);

  // Generate a predicated comparison instruction.
  EVT CompareTys[] = { MVT::Other, MVT::Glue };
  CondCodeSDNode *CC = cast<CondCodeSDNode>(Cond.getNode());
  SDValue CCVal = CurDAG->getTargetConstant(CC->get(), N, MVT::i32);
  SDVTList CompareVT = CurDAG->getVTList(CompareTys);
  SDValue CompareOps[] = {CCVal, LHS, RHS, Chain};
  SDNode *Compare = CurDAG->getMachineNode(T8xx::CMP, N, CompareVT, CompareOps);
  
  // Generate a predicated branch instruction.
  SDValue BranchOps[] = {Target, SDValue(Compare, 0),
                         SDValue(Compare, 1)};
  CurDAG->SelectNodeTo(N, T8xx::Bcc, MVT::Other, BranchOps);
}


void T8xxDAGToDAGISel::Select(SDNode *N) {
  printf ("T8xxDAGToDAGIsel  %i\n", N->getOpcode());
  N->dump ();

  switch (N->getOpcode()) {
    /*
  case ISD::Constant:
    SelectMoveImmediate(N);
    break;
    */
  case ISD::BR_CC:
    printf ("BR_CC\n");
    SelectConditionalBranch(N);
    break;

    /* Note: SelectCode is a function defined defined in the generated file
       T8xxGenDAGISel.inc. The generated function essentially defines the
       MatcherTable and then call
       SelectCodeCommon from the base class "SelectionDAGISel".
    */

  default:
    SelectCode(N);
  }

  printf ("After Sel\n");
  N->dump ();
}


/// createT8xxISelDag - This pass converts a legalized DAG into a
/// T8xx-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createT8xxISelDag(T8xxTargetMachine &TM) {
  return new T8xxDAGToDAGISel(TM);
}
